
===== src\App.jsx =====

import { useEffect, useState } from 'react';
import './App.css';
import axios from "axios";
import TicketForm from "./components/TicketForm";
import TicketList from "./components/TicketList";

const API_URL = import.meta.env.VITE_API_URL;

function App() {
  const [tickets, setTickets] = useState([]);

  useEffect(() => {
    fetchTickets();
  }, []);

  const fetchTickets = async () => {
    const res = await axios.get(`${API_URL}/tickets`);
    setTickets(res.data);
  };

  const handleNewTicket = (ticket) => {
    setTickets((prev) => [...prev, ticket]);
  };

  const handleCloseTicket = (id) => {
    setTickets((prev) =>
      prev.map((ticket) =>
        ticket.id === id ? { ...ticket, status: 'closed' } : ticket
      )
    );
  };

  const handleDeleteTicket = (id) => {
    setTickets((prev) => prev.filter((ticket) => ticket.id !== id));
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8 font-sans">
      <div className="max-w-3xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-6 text-indigo-600">
          ðŸŽ« Ticket Assignment System
        </h1>
        <TicketForm onTicketCreated={handleNewTicket} />
        <TicketList
          tickets={tickets}
          onTicketClosed={handleCloseTicket}
          onTicketDeleted={handleDeleteTicket}
        />
      </div>
    </div>
  );
}

export default App;



===== src\components\FeedbackForm.jsx =====

import React, { useState, useEffect } from "react";
import axios from "axios";

const API_URL = import.meta.env.VITE_API_URL;

const FeedbackForm = ({ ticketId }) => {
  const [version, setVersion] = useState("");
  const [feedback, setFeedback] = useState("");
  const [feedbacks, setFeedbacks] = useState([]);

  // Fetch all feedbacks for this ticket
  const fetchFeedbacks = async () => {
    const res = await axios.get(`${API_URL}/tickets/${ticketId}/feedbacks`);
    setFeedbacks(res.data);
  };

  useEffect(() => {
    fetchFeedbacks();
  }, []);

  // Send feedback to backend
  const handleSubmit = async () => {
    if (!version || !feedback) return;

    await axios.post(`${API_URL}/tickets/${ticketId}/feedback`, { version, feedback });
    setVersion("");
    setFeedback("");
    fetchFeedbacks();
  };

  return (
    <div className="mt-6 border-t pt-4">
      <h4 className="font-semibold text-lg text-indigo-700 mb-2">Feedback</h4>

      {/* Form to submit feedback */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-4 mb-4">
        <input
          type="text"
          value={version}
          onChange={(e) => setVersion(e.target.value)}
          placeholder="Version (e.g. v1)"
          className="w-full sm:w-40 p-2 border border-gray-300 rounded text-sm"
        />
        <input
          type="text"
          value={feedback}
          onChange={(e) => setFeedback(e.target.value)}
          placeholder="Write feedback..."
          className="w-full p-2 border border-gray-300 rounded text-sm"
        />
        <button
          onClick={handleSubmit}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm font-medium"
        >
          Submit
        </button>
      </div>

      {/* Feedback list */}
      {feedbacks.length === 0 ? (
        <p className="text-gray-500 text-sm">No feedback yet.</p>
      ) : (
        <div className="space-y-2">
          {feedbacks.map((f, index) => (
            <div key={index} className="bg-gray-100 p-3 rounded text-sm">
              <div className="font-semibold text-indigo-700">{f.version}</div>
              <div className="text-gray-800 mt-1">{f.feedback}</div>
              <div className="text-xs text-gray-500 mt-1">Submitted at {new Date(f.createdAt).toLocaleString()}</div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default FeedbackForm;



===== src\components\FileUploader.jsx =====

import React, { useState, useEffect } from "react";
import axios from "axios";

const API_URL = import.meta.env.VITE_API_URL;

const FileUploader = ({ ticketId }) => {
    const [file, setFile] = useState(null);
    const [versions, setVersions] = useState([]);
    const [feedback, setFeedback] = useState("");
    const [selectedVersion, setSelectedVersion] = useState("");

    const fetchFiles = async () => {
        const res = await axios.get(`${API_URL}/tickets/${ticketId}/files`);
        const feedbacksRes = await axios.get(`${API_URL}/tickets/${ticketId}/feedbacks`);

        // Merge feedbacks into version list
        const enriched = res.data.map((v) => {
            const matching = feedbacksRes.data.find((f) => f.version === v.version);
            return {
                ...v,
                feedbacks: matching ? matching.feedbacks : [],
            };
        });


        setVersions(enriched);
    };

    useEffect(() => {
        fetchFiles();
    }, []);

    const handleUpload = async () => {
        if (!file) return;
        const formData = new FormData();
        formData.append("file", file);
        await axios.post(`${API_URL}/tickets/${ticketId}/upload`, formData);
        setFile(null);
        fetchFiles();
    };

    const handleSendFeedback = async () => {
        if (!selectedVersion || !feedback) return;
        await axios.post(`${API_URL}/tickets/${ticketId}/feedback`, {
            version: selectedVersion,
            feedback,
        });
        setFeedback("");
        setSelectedVersion("");
        fetchFiles();
    };

    const handleDeleteVersion = async (version) => {
        if (!confirm(`Are you sure you want to delete version ${version}?`)) return;
        await axios.delete(`${API_URL}/tickets/${ticketId}/version/${version}`);
        fetchFiles();
    };

    return (
        <div className="mt-6 border-t pt-4">
            <h4 className="font-semibold text-lg text-indigo-700 mb-2">Design Files & Feedback</h4>

            {/* Upload form */}
            <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-4 mb-4">
                <label className="block w-full">
                    <span className="text-sm font-medium text-gray-700">Select an image file</span>
                    <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => setFile(e.target.files[0])}
                        className="block w-full mt-1 text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-indigo-100 file:text-indigo-700 hover:file:bg-indigo-200"
                    />
                </label>
                <button
                    onClick={handleUpload}
                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm font-medium"
                >
                    Upload File
                </button>
            </div>

            {/* Feedback form */}
            <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-4 mb-6">
                <select
                    value={selectedVersion}
                    onChange={(e) => setSelectedVersion(e.target.value)}
                    className="w-full sm:w-40 p-2 border border-gray-300 rounded text-sm"
                >
                    <option value="">Select version</option>
                    {versions.map((v) => (
                        <option key={v.version} value={v.version}>
                            {v.version}
                        </option>
                    ))}
                </select>
                <input
                    type="text"
                    value={feedback}
                    onChange={(e) => setFeedback(e.target.value)}
                    placeholder="Write feedback..."
                    className="w-full p-2 border border-gray-300 rounded text-sm"
                />
                <button
                    onClick={handleSendFeedback}
                    className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm font-medium"
                >
                    Submit
                </button>
            </div>

            {/* Version list */}
            {versions.length === 0 ? (
                <p className="text-gray-500 text-sm">No files uploaded yet.</p>
            ) : (
                <div className="space-y-3">
                    {versions.map((v, index) => (
                        <div key={index} className="bg-gray-50 p-3 rounded border">
                            <div className="flex justify-between items-center mb-1">
                                <h5 className="font-semibold text-gray-800">{v.version}</h5>
                                <button
                                    onClick={() => handleDeleteVersion(v.version)}
                                    className="text-sm text-red-500 hover:underline"
                                >
                                    Delete version
                                </button>
                            </div>

                            <ul className="pl-0 text-sm text-gray-700 space-y-1">
                                {v.files.map((f, i) => (
                                    <li key={i}>
                                        <a
                                            href={`${API_URL}/uploads/${ticketId}/${v.version}/${f}`}
                                            target="_blank"
                                            rel="noreferrer"
                                            className="text-blue-600 hover:underline"
                                        >
                                            {f}
                                        </a>
                                    </li>
                                ))}
                            </ul>

                            {v.feedbacks && v.feedbacks.length > 0 && (
                                <div className="mt-3 bg-white border rounded p-2 text-sm text-gray-800">
                                    <div className="font-medium text-gray-700 mb-1">Feedbacks:</div>
                                    <ul className="space-y-1">
                                        {v.feedbacks.map((fb, i) => (
                                            <li key={i}>
                                                <div className="text-gray-800">{fb.text}</div>
                                                <div className="text-xs text-gray-500">
                                                    Submitted at {new Date(fb.createdAt).toLocaleString()}
                                                </div>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            )}

                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default FileUploader;



===== src\components\TicketForm.jsx =====

import React, { useState, useEffect } from "react";
import axios from "axios";
const API_URL = import.meta.env.VITE_API_URL;

const TicketForm = ({ onTicketCreated }) => {
  const [form, setForm] = useState({
    title: "",
    description: "",
    deadline: "",
    memberId: "",
  });

  const [members, setMembers] = useState([]);

  useEffect(() => {
    axios.get(`${API_URL}/members`).then((res) => {
      setMembers(res.data);
    });
  }, []);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await axios.post(`${API_URL}/tickets`, form);
    onTicketCreated(res.data);
    setForm({ title: "", description: "", deadline: "", memberId: "" });
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="bg-white shadow-md rounded-xl p-6 mb-6 space-y-5"
    >
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Title
        </label>
        <input
          name="title"
          value={form.title}
          onChange={handleChange}
          className="w-full p-2.5 border border-gray-300 rounded-md"
          placeholder="Bug in login..."
          required
        />
      </div>
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Description
        </label>
        <textarea
          name="description"
          value={form.description}
          onChange={handleChange}
          rows="4"
          className="w-full p-2.5 border border-gray-300 rounded-md resize-none"
          placeholder="Describe the issue..."
          required
        ></textarea>
      </div>
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Deadline
        </label>
        <input
          name="deadline"
          type="date"
          value={form.deadline}
          onChange={handleChange}
          className="w-full p-2.5 border border-gray-300 rounded-md"
          required
        />
      </div>
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Assign to
        </label>
        <select
          name="memberId"
          value={form.memberId}
          onChange={handleChange}
          className="w-full p-2.5 border border-gray-300 rounded-md"
          required
        >
          <option value="">Select team member...</option>
          {members.map((m) => (
            <option key={m.id} value={m.id}>
              {m.name} ({m.skills.join(", ")})
            </option>
          ))}
        </select>
      </div>
      <button
        type="submit"
        className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2.5 rounded-md"
      >
        Create Ticket
      </button>
    </form>
  );
};

export default TicketForm;



===== src\components\TicketList.jsx =====

import React from "react";
import axios from "axios";
import FileUploader from "./FileUploader";

const API_URL = import.meta.env.VITE_API_URL;

const TicketList = ({ tickets, onTicketClosed, onTicketDeleted }) => {
  const handleClose = async (id) => {
    await axios.patch(`${API_URL}/tickets/${id}/close`);
    onTicketClosed(id);
  };

  const handleDelete = async (id) => {
    await axios.delete(`${API_URL}/tickets/${id}`);
    onTicketDeleted(id);
  };

  if (tickets.length === 0) {
    return <p className="text-gray-600 text-center">No tickets yet.</p>;
  }

  return (
    <div className="space-y-4">
      {tickets.map((ticket) => (
        <div
          key={ticket.id}
          className="bg-white shadow-md rounded p-4 border-l-4 border-indigo-500"
        >
          <h3 className="text-lg font-semibold text-indigo-700">{ticket.title}</h3>
          <p className="text-gray-700">{ticket.description}</p>
          <div className="mt-2 text-sm text-gray-500">
            Deadline: {ticket.deadline} <br />
            Assigned to:{" "}
            <span className="font-medium text-black">
              {ticket.assignedTo?.name || "Unassigned"}
            </span>{" "}
            <br />
            Status:{" "}
            <span className="uppercase font-semibold">{ticket.status}</span>
          </div>

          <div className="mt-4 flex gap-2">
            {ticket.status !== "closed" && (
              <button
                onClick={() => handleClose(ticket.id)}
                className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm"
              >
                Close
              </button>
            )}
            <button
              onClick={() => handleDelete(ticket.id)}
              className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm"
            >
              Delete
            </button>
          </div>

          <FileUploader ticketId={ticket.id} />
        </div>
      ))}
    </div>
  );
};

export default TicketList;



===== src\main.jsx =====

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

